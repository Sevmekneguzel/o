// Generated by CoffeeScript 1.10.0
var Event, EventType, Explanation, Obj, ObjType, beforeSpaces, buffer, cbexs, cbi, charExplanation, eventObj, eventString, events, explain, fc, fcb, fs, getExplanation, getMaxWidth, getSpaces, maxWidth, newChar, newCodeBlock, newCodeBlockExplanation, newNumber, newString, numberExplanation, parse, resetParser, stringExplanation;

ObjType = {
  Number: 0,
  String: 1,
  Char: 2,
  Array: 3,
  CodeBlock: 4,
  DoLoop: 5,
  If: 6,
  WhileLoop: 7
};

Explanation = (function() {
  function Explanation(element, explanation) {
    this.element = element;
    this.explanation = explanation;
  }

  return Explanation;

})();

numberExplanation = function(n) {
  return new Explanation(n, "Push " + n + " to the stack\n");
};

stringExplanation = function(string) {
  return new Explanation("\"" + string + "\"", "Push string to the stack\n");
};

charExplanation = function(c) {
  return new Explanation("'" + c, " Push " + c + " to the stack\n");
};

getExplanation = function(c) {
  if (c.match(/[0-9A-F]/)) {
    return numberExplanation(c);
  } else if (explanations[c] !== void 0) {
    return new Explanation(c, explanations[c] + "\n");
  } else {
    return new Explanation(c, "\n");
  }
};

Obj = (function() {
  function Obj(type, string1, num, array, cbexs1, explanation) {
    this.type = type;
    this.string = string1;
    this.num = num;
    this.array = array;
    this.cbexs = cbexs1;
    this.explanation = explanation;
  }

  Obj.type = ObjType.Number;

  Obj.string = "";

  Obj.num = "";

  Obj.array = [];

  Obj.explanation = new Explanation("", "");

  Obj.cbexs = [];

  return Obj;

})();

newString = function(string) {
  return new Obj(ObjType.String, string, "", [], [], stringExplanation(string));
};

newNumber = function(n) {
  return new Obj(ObjType.Number, "", n, [], [], numberExplanation(n));
};

newChar = function(c) {
  return new Obj(ObjType.Char, c, "", [], [], charExplanation(c));
};

newCodeBlock = function(string) {
  return new Obj(ObjType.CodeBlock, string, "", [], [], new Explanation("{" + getSpaces(string.length) + "}", "Push CodeBlock to the stack\n"));
};

EventType = {
  ObjectEvent: 0,
  StringEvent: 1
};

Event = (function() {
  function Event(type, string1, c1, object) {
    this.type = type;
    this.string = string1;
    this.c = c1;
    this.object = object;
  }

  return Event;

})();

eventString = function(c, s) {
  return new Event(EventType.StringEvent, s, c, 0);
};

eventObj = function(o) {
  return new Event(EventType.ObjectEvent, "", '', o);
};

events = [];

fcb = false;

fs = false;

fc = false;

buffer = "";

cbi = 0;

cbexs = [];

newCodeBlockExplanation = function(ex) {
  return cbexs.push(new Explanation(getSpaces(cbexs.length) + ex.element, ex.explanation));
};

resetParser = function() {
  var cbecs;
  events = [];
  fcb = false;
  fs = false;
  fc = false;
  buffer = "";
  cbecs = [];
  return cbi = 0;
};

parse = function(code) {
  var c, cb, i, k, ref;
  if (code === "") {
    return "";
  }
  resetParser();
  for (i = k = 0, ref = code.length - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
    c = code.charAt(i);
    if (fc && !fs && !fcb) {
      fc = false;
      events.push(eventObj(newChar(c)));
    }
    if (fcb && !fs) {
      if (c === "{") {
        cbi++;
      }
      if (c === "}" && cbi === 0) {
        fcb = false;
        cb = newCodeBlock(buffer);
        cb.cbexs = cbexs;
        events.push(eventObj(cb));
        cbexs = [];
        buffer = "";
        continue;
      }
      if (c === "}") {
        cbi--;
      }
      buffer += c;
      newCodeBlockExplanation(getExplanation(c));
    } else if (fs && !fcb) {
      if (c === "\"") {
        fs = false;
        events.push(eventObj(newString(buffer)));
        buffer = "";
        continue;
      }
      buffer += c;
    } else if (c.match(/[0-9A-F]/)) {
      events.push(eventObj(newNumber(c)));
    } else if (c === "{") {
      fcb = true;
    } else if (c === "\"") {
      fs = true;
    } else if (c === "'") {
      fc = true;
    } else if (c === "J" || c === "K") {
      events.push(eventString(c, "Assign to variable " + c));
    } else if (c === "d" && !fcb) {
      if (events[events.length - 1].object.type === ObjType.CodeBlock) {
        events[events.length - 1].object.type = ObjType.DoLoop;
      }
    } else if (c === "?" && !fcb) {
      if (events[events.length - 1].object.type === ObjType.CodeBlock) {
        events[events.length - 1].object.type = ObjType.If;
      }
    } else if (c === "w" && !fcb) {
      if (events[events.length - 1].object.type === ObjType.CodeBlock) {
        events[events.length - 1].object.type = ObjType.WhileLoop;
      }
    } else if (explanations[c] !== void 0) {
      events.push(eventString(c, explanations[c]));
    }
  }
  return explain(events);
};

maxWidth = 0;

beforeSpaces = 0;

getMaxWidth = function() {
  return maxWidth;
};

getSpaces = function(i) {
  var j, s;
  if (i < 0) {
    "";
  }
  s = "";
  j = 0;
  while (j < i) {
    s += " ";
    j++;
  }
  return s;
};

explain = function(events) {
  var cbei, cbex, e, event, g, k, l, len, len1, len2, m, maxSpaces, ref, s;
  maxWidth = 0;
  beforeSpaces = 0;
  maxSpaces = 0;
  e = "";
  for (k = 0, len = events.length; k < len; k++) {
    event = events[k];
    if (event.type === EventType.ObjectEvent) {
      if (event.object.type === ObjType.Number) {
        maxSpaces += event.object.num.length;
      }
      if (event.object.type === ObjType.String) {
        maxSpaces += event.object.string.length + 2;
      }
      if (event.object.type === ObjType.Char) {
        maxSpaces += event.object.string.length + 1;
      }
      if (event.object.type === ObjType.CodeBlock) {
        maxSpaces += event.object.string.length + 2;
      }
      if (event.object.type === ObjType.DoLoop) {
        maxSpaces += event.object.string.length + 3;
      }
      if (event.object.type === ObjType.If) {
        maxSpaces += event.object.string.length + 3;
      }
      if (event.object.type === ObjType.WhileLoop) {
        maxSpaces += event.object.string.length + 3;
      }
    } else if (event.type === EventType.StringEvent) {
      maxSpaces += 1;
    }
  }
  for (l = 0, len1 = events.length; l < len1; l++) {
    event = events[l];
    if (event.type === EventType.ObjectEvent) {
      if (event.object.type === ObjType.Number) {
        g = event.object.num.length;
        s = getSpaces(beforeSpaces) + event.object.explanation.element + getSpaces(maxSpaces - beforeSpaces) + event.object.explanation.explanation;
        if (maxWidth < s.length) {
          maxWidth = s.length;
        }
        beforeSpaces += g;
        e += s;
      } else if (event.object.type === ObjType.String) {
        g = event.object.string.length + 2;
        s = getSpaces(beforeSpaces) + event.object.explanation.element + getSpaces(maxSpaces - beforeSpaces - g + 1) + event.object.explanation.explanation;
        if (maxWidth < s.length) {
          maxWidth = s.length;
        }
        beforeSpaces += g;
        e += s;
      } else if (event.object.type === ObjType.Char) {
        g = event.object.string.length + 1;
        s = getSpaces(beforeSpaces) + "'" + event.object.explanation.element + getSpaces(maxSpaces - beforeSpaces - g + 2) + event.object.explanation.explanation;
        if (maxWidth < s.length) {
          maxWidth = s.length;
        }
        beforeSpaces += g;
        e += s;
      } else if (event.object.type === ObjType.CodeBlock || event.object.type === ObjType.DoLoop || event.object.type === ObjType.WhileLoop) {
        g = event.object.string.length + 2;
        s = getSpaces(beforeSpaces) + "{" + getSpaces(event.object.string.length) + "}" + (event.object.type === ObjType.DoLoop ? "d" : (event.object.type === ObjType.WhileLoop ? "w" : "")) + getSpaces(maxSpaces - beforeSpaces - g + 1 - (event.object.type === ObjType.DoLoop || event.object.type === ObjType.WhileLoop ? 1 : 0)) + (event.object.type === ObjType.DoLoop ? "For Loop" : (event.object.type === ObjType.WhileLoop ? "While Loop" : "Push CodeBlock to the stack")) + "\n";
        cbei = 0;
        ref = event.object.cbexs;
        for (m = 0, len2 = ref.length; m < len2; m++) {
          cbex = ref[m];
          s += getSpaces(beforeSpaces + 1) + cbex.element + getSpaces(maxSpaces - beforeSpaces - g + event.object.string.length - cbei + 1) + cbex.explanation;
          cbei++;
        }
        if (maxWidth < s.length) {
          maxWidth = s.length;
        }
        beforeSpaces += g;
        e += s;
      } else if (event.object.type === ObjType.If) {
        g = event.object.string.length + 3;
        s = getSpaces(beforeSpaces) + "{" + event.object.string + "}?" + getSpaces(maxSpaces - beforeSpaces - g + 1) + " If block\n";
        if (maxWidth < s.length) {
          maxWidth = s.length;
        }
        beforeSpaces += g;
        e += s;
      }
    } else if (event.type === EventType.StringEvent) {
      s = getSpaces(beforeSpaces) + event.c + getSpaces(maxSpaces - beforeSpaces) + event.string;
      g = s.length;
      if (maxWidth < g) {
        maxWidth = g;
      }
      beforeSpaces += 1;
      e += s + "\n";
    }
  }
  return e;
};
